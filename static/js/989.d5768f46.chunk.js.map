{"version":3,"file":"static/js/989.d5768f46.chunk.js","mappings":"mQACA,GAAgB,KAAO,2BAA2B,MAAQ,6B,SCOnD,SAASA,IACZ,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAmCjB,OACI,gBAAKC,UAAWC,EAAAA,SAAhB,UACI,kBAAMC,SAhBO,SAAAC,GACjBA,EAAEC,iBACFC,QAAQC,IAAIX,GAEZ,IAAMN,EAAOc,EAAEI,OAAOC,SAASnB,KAAKoB,MAC9BlB,EAAQY,EAAEI,OAAOC,SAASjB,MAAMkB,MAChChB,EAAWU,EAAEI,OAAOC,SAASf,SAASgB,MAC5CJ,QAAQC,IAAIjB,EAAKE,EAAME,GACvBK,GACIY,EAAAA,EAAAA,IAAS,CAAErB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KAd5BH,EAAQ,IACRE,EAAS,IACTE,EAAY,GAef,EAIqCM,UAAWC,EAAAA,KAAUU,aAAa,MAAhE,WACI,SAACC,EAAA,EAAD,CAAWC,MAAM,OAAOC,QAAQ,WAAWd,UAAWC,EAAAA,MAClDc,KAAK,OACL1B,KAAK,OACL2B,UAAQ,EACRP,MAAOpB,EACP4B,SAxCS,SAAAC,GACrB5B,EAAQ4B,EAAMC,cAAcV,MAC/B,KAuCW,SAACG,EAAA,EAAD,CAAWC,MAAM,SAASC,QAAQ,WAAWd,UAAWC,EAAAA,MACpDc,KAAK,OACL1B,KAAK,QACL2B,UAAQ,EACRP,MAAOlB,EACP0B,SA1CU,SAAAC,GACtB1B,EAAU0B,EAAMC,cAAcV,MACjC,KAyCW,SAACG,EAAA,EAAD,CAAWC,MAAM,WAAWC,QAAQ,WAAWd,UAAWC,EAAAA,MACtDc,KAAK,OACL1B,KAAK,WACL2B,UAAQ,EACRP,MAAOhB,EACPwB,SA5Ca,SAAAC,GACzBxB,EAAawB,EAAMC,cAAcV,MACpC,KA2CW,0BAAM,8BACN,SAACW,EAAA,EAAD,CAAQN,QAAQ,WAAWC,KAAK,SAAhC,SAAyC,iBAIxD,CCzED,MAA2B,2BCEZ,SAASM,IACpB,OACI,iBAAKrB,UAAWC,EAAhB,WACI,eAAIqB,MAAO,CAAEC,UAAW,UAAxB,SAAoC,kBACpC,SAACpC,EAAD,MAGX,C,wJCVM,IAAMU,EAAc,SAAA2B,GAAK,OAAIA,EAAM7B,SAAS8B,KAAnB,EAEnBC,EAAqB,SAAAF,GAAK,OAAIA,EAAM7B,SAASgC,IAAnB,EAI1BC,EAAe,SAAAJ,GAAK,OAAIA,EAAM7B,SAASkC,SAAnB,EACpBC,EAAW,SAAAN,GAAK,OAAIA,EAAM7B,SAASoC,KAAnB,EAEhBC,EAAqB,SAAC,GAAoC,IAAtBL,EAAqB,EAAjChC,SAAYgC,KAAQM,EAAa,EAAbA,OACvD,IAAKA,EACH,OAAON,EAET,IAAMO,EAAmBD,EAAOE,cAEhC,OAAOR,EAAKM,QAAO,SAAAG,GAAO,OACxBA,EAAQ/C,KAAK8C,cAAcE,SAASH,EADZ,GAG3B,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/registerForm.module.css?0fd0","components/RegisterForm/RegisterForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Pages/Register/register.module.css?3eb7","components/Pages/Register/Register.jsx","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"registerForm_form__8tKcV\",\"input\":\"registerForm_input__uBoqp\"};","import { Button, TextField } from '@mui/material';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { register } from '../../redux/Auth/authOperations';\nimport {getContacts} from '../../redux/selectors'\n\nimport css from './registerForm.module.css';\n\nexport function RegisterForm() {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n\n\n    const handleNameChange = event => {\n        setName(event.currentTarget.value)\n    };\n\n    const handleEmailChange = event => {\n        setEmail( event.currentTarget.value );\n    };\n\n    const handlePasswordChange = event => {\n        setPassword( event.currentTarget.value );\n    };\n\n    const reset = () => {\n        setName('');\n        setEmail('');\n        setPassword('');\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        console.log(contacts);\n        // const form = e.currentTarget;\n        const name = e.target.elements.name.value;\n        const email = e.target.elements.email.value\n        const password = e.target.elements.password.value;\n        console.log(name,email,password)\n        dispatch(\n            register({ name, email, password })\n        );\n        reset();\n    };\n\n    return (\n        <div className={css.register}>\n            <form onSubmit={handleSubmit} className={css.form} autoComplete=\"off\">\n                <TextField label=\"Name\" variant=\"outlined\" className={css.input}\n                    type=\"text\"\n                    name=\"name\"\n                    required\n                    value={name}\n                    onChange={handleNameChange} />\n                <TextField label=\"E-mail\" variant=\"outlined\" className={css.input}\n                    type=\"text\"\n                    name=\"email\"\n                    required\n                    value={email}\n                    onChange={handleEmailChange} />\n                <TextField label=\"Password\" variant=\"outlined\" className={css.input}\n                    type=\"text\"\n                    name=\"password\"\n                    required\n                    value={password}\n                    onChange={handlePasswordChange} />\n                <span>* This field is required</span>\n                <Button variant=\"outlined\" type=\"submit\">Register</Button>\n            </form>\n        </div>\n    );\n}","// extracted by mini-css-extract-plugin\nexport default {\"register\":\"register_register__HncQb\"};","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nimport css from './register.module.css'\nexport default function Register() {\n    return (\n        <div className={css.register}>\n            <h1 style={{ textAlign: 'center' }}>Registration</h1>\n            <RegisterForm />\n        </div>\n    );\n}","export const getContacts = state => state.contacts.items;\n\nexport const selectContactsList = state => state.contacts.list;\nexport const selectFilter = ({ filter }) => filter;\n\n\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = ({ contacts: { list }, filter }) => {\n  if (!filter) {\n    return list;\n  }\n  const normalizedFilter = filter.toLowerCase();\n\n  return list.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};"],"names":["RegisterForm","useState","name","setName","email","setEmail","password","setPassword","contacts","useSelector","getContacts","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","console","log","target","elements","value","register","autoComplete","TextField","label","variant","type","required","onChange","event","currentTarget","Button","Register","style","textAlign","state","items","selectContactsList","list","getIsLoading","isLoading","getError","error","getVisibleContacts","filter","normalizedFilter","toLowerCase","contact","includes"],"sourceRoot":""}